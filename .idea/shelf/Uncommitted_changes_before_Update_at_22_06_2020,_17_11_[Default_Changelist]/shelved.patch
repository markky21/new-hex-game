Index: src/modules/canvas/Canvas.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import './three-extend';\n\nimport React, { Suspense, useCallback, useEffect, useRef, useState } from 'react';\nimport { Canvas as ThreeCanvas } from 'react-three-fiber';\nimport { Color, Object3D, PCFSoftShadowMap, Uncharted2ToneMapping, Vector3 } from 'three';\n\nimport { Scene } from './components/Scene';\nimport { GameBoard } from './components/GameBoard';\nimport { BackgroundBoard } from './components/BackgroundBoard/BackgroundBoard';\nimport { Effects } from './Effects/Effect';\n\nObject3D.DefaultUp = new Vector3(0, 0, 1);\n\nexport const Canvas: React.FC = () => {\n  const [hovered, hover] = useState(false);\n  const [down, set] = useState(false);\n  const mouse = useRef([0, 0]);\n  const onMouseMove = useCallback(\n    ({ clientX: x, clientY: y }) => (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]),\n    []\n  );\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\n  useEffect(() => {\n    document.body.style.cursor = hovered\n      ? 'pointer'\n      : \"url('https://raw.githubusercontent.com/chenglou/react-motion/master/demos/demo8-draggable-list/cursor.png') 39 39, auto\";\n  }, [hovered]);\n\n  return (\n    <ThreeCanvas\n      orthographic\n      style={{ backgroundColor: 'black ' }}\n      onCreated={({ gl }) => {\n        gl.toneMapping = Uncharted2ToneMapping;\n        gl.setClearColor(new Color('#020207'));\n        gl.shadowMap.enabled = true;\n        gl.shadowMap.type = PCFSoftShadowMap;\n        gl.toneMappingExposure = 0.5;\n      }}\n      onMouseMove={onMouseMove}\n      onMouseUp={() => set(false)}\n      onMouseDown={() => set(true)}>\n      <fog attach=\"fog\" args={[0xffffff, 390, 500]} />\n\n      <Scene>\n        <Suspense fallback={null}>\n          <BackgroundBoard />\n        </Suspense>\n        <GameBoard debug={true} />\n      </Scene>\n      <Effects down={down} />\n    </ThreeCanvas>\n  );\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/modules/canvas/Canvas.tsx	(revision bd20e0c69697f33f3f02476dcf44b9c248136eb8)
+++ src/modules/canvas/Canvas.tsx	(date 1592818694724)
@@ -41,7 +41,7 @@
       onMouseMove={onMouseMove}
       onMouseUp={() => set(false)}
       onMouseDown={() => set(true)}>
-      <fog attach="fog" args={[0xffffff, 390, 500]} />
+      {/*<fog attach="fog" args={[0xffffff, 390, 500]} />*/}
 
       <Scene>
         <Suspense fallback={null}>
Index: src/modules/canvas/Effects/Effect.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useRef, useMemo, useEffect } from 'react';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { Vector2 } from 'three';\n\nimport { GlitchPass } from './Glitchpass';\nimport { WaterPass } from './Waterpass';\n\nextend({ EffectComposer, ShaderPass, RenderPass, WaterPass, UnrealBloomPass, FilmPass, GlitchPass });\n\ninterface EffectsProps {\n  down?: boolean;\n}\n\nexport const Effects: React.FC<EffectsProps> = ({ down }) => {\n  const composer = useRef();\n  const { scene, gl, size, camera } = useThree();\n  const aspect = useMemo(() => new Vector2(size.width, size.height), [size]);\n  // @ts-ignore\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size]);\n  // @ts-ignore\n  useFrame(() => composer.current.render(), 1);\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <afterimagePass attachArray=\"passes\" uniforms-damp-value={0.5} />\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 0.8, 1, 0.2]} />\n      <filmPass attachArray=\"passes\" args={[0.25, 0.4, 1500, 0]} />\n      <glitchPass attachArray=\"passes\" factor={down ? 1 : 0} />\n    </effectComposer>\n  );\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/modules/canvas/Effects/Effect.tsx	(revision bd20e0c69697f33f3f02476dcf44b9c248136eb8)
+++ src/modules/canvas/Effects/Effect.tsx	(date 1592819183557)
@@ -29,8 +29,8 @@
       <renderPass attachArray="passes" scene={scene} camera={camera} />
       <afterimagePass attachArray="passes" uniforms-damp-value={0.5} />
       <unrealBloomPass attachArray="passes" args={[aspect, 0.8, 1, 0.2]} />
-      <filmPass attachArray="passes" args={[0.25, 0.4, 1500, 0]} />
-      <glitchPass attachArray="passes" factor={down ? 1 : 0} />
+      <filmPass attachArray="passes" args={[0.8, 0.8, 2000, 0.2]} />
+      <glitchPass attachArray="passes" factor={down ? 0.5 : 0} />
     </effectComposer>
   );
 };
